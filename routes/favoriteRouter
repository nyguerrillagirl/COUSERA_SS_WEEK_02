const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const authenticate = require('../authenticate');
const cors = require('./cors');

const Favorites = require('../models/favorites');

const favoriteRouter = express.Router();

favoriteRouter.use(bodyParser.json());

favoriteRouter.route('/')
.options(cors.corsWithOptions, (req, res) => {  res.sendStatus(200)})
.get(cors.cors, authenticate.verifyUser, (req,res,next) => {
    console.log("favorites ===> ", req.user);
    Favorites.find({user:req.user._id})
    .populate('user')
    .populate('dishes')
    .then((favorites) => {
        res.statusCode = 200;
        res.setHeader('Content-Type', 'application/json');
        res.json(favorites);
    }, (err) => next(err))
    .catch((err) => next(err));
   
 })
.post(cors.corsWithOptions,authenticate.verifyUser, (req, res, next) => {

    console.log("===> POST favorites", req.body.toString());
    // Leaders.create(req.body)
    // .then((leader) => {
    //     console.log('Leader Created ', leader);
    //     res.statusCode = 200;
    //     res.setHeader('Content-Type', 'application/json');
    //     res.json(leader);
    // }, (err) => next(err))
    //.catch((err) => next(err));
    res.statusCode = 403;
    res.end('1POST operation not implemented yet on /favorites');   
})
.put(cors.corsWithOptions,authenticate.verifyUser, authenticate.verifyAdmin, (req, res, next) => {
    res.statusCode = 403;
    res.end('PUT operation not supported on /favorites');
})
.delete(cors.corsWithOptions,authenticate.verifyUser, authenticate.verifyAdmin, (req, res, next) => {
    // Leaders.remove({})
    // .then((resp) => {
    //     res.statusCode = 200;
    //     res.setHeader('Content-Type', 'application/json');
    //     res.json(resp);
    // }, (err) => next(err))
    // .catch((err) => next(err));    
    res.statusCode = 403;
    res.end('DELETE operation not implement yet on /favorites');

});


// Working on a specific promotion
favoriteRouter.route('/:dishId')
.options(cors.corsWithOptions, (req, res) => { res.sendStatus(200)})
.get(cors.cors,(req, res,next) => {
    // Leaders.findById(req.params.dishId)
    // .then((leader) => {
    //     res.statusCode = 200;
    //     res.setHeader('Content-Type', 'application/json');
    //     res.json(leader);
    // }, (err) => next(err))
    // .catch((err) => next(err));
})
.post(cors.corsWithOptions,authenticate.verifyUser, (req, res,next) => {
    // Check if user has any entries (so we can create and/or add to)
    console.log("POST /dishId ===>", req.params.dishId);
    Favorites.find({user:req.user._id})
    .then( (userFavorites) => {
        console.log("POST favorites/dishId ==>", userFavorites);
        if (userFavorites && !userFavorites.length) {
            console.log("POST /favorites/dishId ===> user does not have any favorites");
            favoriteItem = {user: req.user._id, dishes:[req.params.dishId]};
            Favorites.create(favoriteItem)
            .then((favorite) => {
                console.log('Favorite Created ', favorite);
                res.statusCode = 200;
                res.setHeader('Content-Type', 'application/json');
                res.json(favorite);   
            }, (err) => next(err))
            .catch( (err) => next(err));
        } else {
            console.log("POST /favorites/dishId ===> user has a current list of favorite");
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.json(userFavorites);
        }

    }, (err) => next(err))
    .catch((err) => next(err));  
 })
.put(cors.corsWithOptions,authenticate.verifyUser, (req, res,next) => {
    // Leaders.findByIdAndUpdate(req.params.leaderId, {
    //     $set: req.body
    // }, { new: true })
    // .then((leader) => {
    //     res.statusCode = 200;
    //     res.setHeader('Content-Type', 'application/json');
    //     res.json(leader);
    // }, (err) => next(err))
    // .catch((err) => next(err));
    res.statusCode = 403;
    res.end('PUT operation not supported on /favorites/'+ req.params.dishId);

})
.delete(cors.corsWithOptions,authenticate.verifyUser, (req, res,next) => {
    // Leaders.findByIdAndRemove(req.params.leaderId)
    // .then((resp) => {
    //     res.statusCode = 200;
    //     res.setHeader('Content-Type', 'application/json');
    //     res.json(resp);
    // }, (err) => next(err))
    // .catch((err) => next(err));
    res.statusCode = 403;
    res.end('DELETE operation not implemented yet on /favorites/'+ req.params.dishId);

});

module.exports = favoriteRouter;